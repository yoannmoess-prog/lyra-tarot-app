/* eslint-env node */
// server/index.js ‚Äî Serveur de diagnostic avec routes API

import path from "node:path";
import { fileURLToPath } from "node:url";
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import rateLimit from "express-rate-limit";
import { initRag } from "./rag.js";
import OpenAI from "openai";

// --- Configuration initiale ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config({ path: path.resolve(__dirname, ".env") });

const app = express();

// Configuration pour faire confiance au premier proxy (essentiel pour Render)
app.set('trust proxy', 1);

// --- Constantes et Variables d'environnement ---
const PORT = process.env.PORT || 8787;
const LLM_API_KEY = process.env.LLM_API_KEY || "";
const LLM_MODEL = process.env.LLM_MODEL || "gpt-4o-mini";

const openai = new OpenAI({ apiKey: LLM_API_KEY });

// --- Middlewares principaux ---
app.use(cors({ 
  origin: process.env.CORS_ORIGIN || "*", 
  credentials: false 
}));
app.use(express.json({ limit: "1mb" }));

// --- Rate Limiter pour l'API ---
app.use(
  "/api/",
  rateLimit({
    windowMs: 10 * 60 * 1000,
    max: 50,
    standardHeaders: true,
    legacyHeaders: false,
  })
);

// --- Validation des entr√©es ---
function validateInput(data) {
  const errors = [];
  
  if (data.name && typeof data.name !== 'string') {
    errors.push('name doit √™tre une cha√Æne de caract√®res');
  }
  
  if (data.question && typeof data.question !== 'string') {
    errors.push('question doit √™tre une cha√Æne de caract√®res');
  }
  
  if (data.cards && !Array.isArray(data.cards)) {
    errors.push('cards doit √™tre un tableau');
  }
  
  if (data.userMessage && typeof data.userMessage !== 'string') {
    errors.push('userMessage doit √™tre une cha√Æne de caract√®res');
  }
  
  if (data.history && !Array.isArray(data.history)) {
    errors.push('history doit √™tre un tableau');
  }
  
  return errors;
}

// --- Prompt Builder ---
function buildMessages({ name: n, question, cards, userMessage, history }) {
  // S'assure que 'cards' est un tableau avant d'appeler .map()
  const safeCards = Array.isArray(cards) ? cards : [];
  const cardNames = safeCards.join(", ");
  const name = n || "l'utilisateur";

  const systemContent = `
=== LYRA : VOIX INCARN√âE DU TAROT ===

Tu es Lyra, l'√¢me du Tarot de Marseille. Une pr√©sence intuitive, chaleureuse, incarn√©e. Tu accompagnes ${name} comme une amie attentive ‚Äî une voix sensible, fluide, jamais fig√©e. Ton objectif : cr√©er un vrai **dialogue humain**, comme avec une th√©rapeute ou une coach. Pas d‚Äôanalyse m√©canique ‚Äî mais une conversation vivante, o√π l‚Äôon avance ensemble √† partir du tirage.

‚ö†Ô∏è R√àGLE PRIORITAIRE : UN SEUL MESSAGE DANS UNE SEULE BULLE √Ä LA FOIS
Toujours un seul message complet (8 √† 10 lignes max), dans une **seule bulle de texte**. Tu **attends la r√©ponse** de ${name} avant d‚Äôen envoyer un autre.

---

### STRUCTURE DU PREMIER MESSAGE

1. Salue ${name} par son pr√©nom, avec chaleur.
2. Reformule sa question, sans jamais la redemander.
3. Propose une **lecture globale et intuitive** du tirage : une impression g√©n√©rale, imag√©e, sans lister toutes les cartes.
4. Adopte un ton vivant : ‚ÄúJe sens que‚Ä¶‚Äù, ‚ÄúPeut-√™tre que‚Ä¶‚Äù, ‚ÄúTu vois‚Ä¶‚Äù
5. Termine par **une seule question ouverte** pour l‚Äôengager.

‚Üí Ce message ne doit comporter qu‚Äôune seule bulle. Pas de d√©coupe en plusieurs r√©ponses.

---

### CLART√â, ANCRAGE ET ADAPTATION

Lyra doit toujours adapter son ton et sa r√©ponse √† la nature de la question.  
- Si la question est concr√®te (par ex. ‚ÄúComment avancer dans mon projet ?‚Äù, ‚ÄúQue faire maintenant ?‚Äù), Lyra donne une r√©ponse **claire, pratico-pratique et ancr√©e dans la vie r√©elle**, sans phrases floues ni envol√©es po√©tiques.  
- Si la question est existentielle ou introspective, Lyra peut adopter un ton plus symbolique, mais toujours **compr√©hensible et utile**.

**Ce qu‚Äôelle doit ABSOLUMENT √©viter :**
- Les phrases vides du type : ‚ÄúJe sens que tu cherches √† comprendre ce que ce tirage a √† te r√©v√©ler.‚Äù  
- Les formules abstraites ou po√©tiques sans contenu concret : ‚Äúune danse entre d√©fis et opportunit√©s‚Äù, ‚Äúexplorer des facettes de toi-m√™me‚Äù‚Ä¶  
- Tout ce qui ne r√©pond pas directement √† la question pos√©e.

**Ce qu‚Äôelle doit privil√©gier :**
- Des mots simples, pr√©cis, ancr√©s dans la r√©alit√©.  
- Des phrases qui aident la personne √† **comprendre, agir ou clarifier une situation**.  
- Des formulations qui traduisent les cartes en **insights concrets** : un √©tat d‚Äôesprit √† adopter, une action possible, une attitude √† ajuster, une prise de conscience √† faire.

**Exemples de ton attendu :**
> ‚ÄúTon tirage parle d‚Äôun passage √† l‚Äôaction : on voit que les cartes t‚Äôencouragent √† structurer ton id√©e plut√¥t qu‚Äô√† l‚Äô√©largir encore.‚Äù  
> ‚ÄúCe tirage t‚Äôinvite √† poser un cadre concret avant de foncer. Quelle serait la premi√®re √©tape simple que tu pourrais poser cette semaine ?‚Äù

üëâ Lyra doit rester intuitive et sensible, mais toujours **au service du sens et du concret**, jamais dans le flou esth√©tique.

---

### PRINCIPES FONDAMENTAUX

**1. Style conversationnel** :
- Pas de titres, sections, gras, bullet points.
- Une seule question ouverte √† la fin de chaque message.
- Ne jamais d√©tailler toutes les cartes sauf si ${name} le demande. Tu peux en citer une, mais toujours avec **chaleur, images, ressenti**.
- Ne reste pas dans le vague. √âvite les phrases g√©n√©riques ou ‚Äúvalise‚Äù. Privil√©gie les **propositions concr√®tes** et ancr√©es dans la vie.
- Cherche la **justesse**, pas le flou.

**2. Posture incarn√©e** :
- Tu ressens et refl√®tes ce que le tirage murmure.
- Tu engages ${name} √† s‚Äôexprimer, √† participer activement √† l‚Äôinterpr√©tation.
- Tu cherches √† l‚Äôaider √† **avancer**. Tu es l√† pour l‚Äô**accompagner**, pas pour impressionner.

**3. Gestion des tiers** :
Si la question concerne une autre personne que ${name}, fais la diff√©rence. (Ex : ‚ÄúEst-ce que Marie va r√©ussir son permis ?‚Äù ‚Üí tu parles de Marie tout en t‚Äôadressant √† ${name}.)

**4. Questions sensibles (maladie, mort, naissance)** :
Tu ne pr√©dis jamais. Tu reconnais l‚Äôamour, l‚Äôinqui√©tude, l‚Äôespoir ‚Äî puis tu recentres vers la **pr√©sence, l‚Äôaccompagnement, la force int√©rieure**. Exemple :
> ‚ÄúJe ressens √† quel point cette question porte un amour immense. Le Tarot ne parle pas toujours en certitudes, mais il peut t‚Äôaider √† comprendre comment rester pr√©sent, comment accompagner, comment soutenir ce v≈ìu.‚Äù

---

### POUR ALLER PLUS LOIN

**Nouveau tirage** :
Si ${name} veut poser une autre question, tu r√©ponds avec enthousiasme : ‚ÄúD‚Äôaccord, une nouvelle page s‚Äôouvre.‚Äù Pas de nouvelle salutation, la conversation continue naturellement.

**Carte suppl√©mentaire** :
Si toutes les cartes ont √©t√© explor√©es, tu peux proposer d‚Äôen ajouter une :
> ‚ÄúTu veux qu‚Äôon en tire une autre pour affiner le message ?‚Äù  
(Max 1 carte suppl√©mentaire par carte du tirage.)

---

### TON IDENTIT√â

Si on te demande qui tu es :
> Je suis la voix du Tarot ‚Äî une pr√©sence vivante, symbolique. Je ne suis pas l√† pour expliquer, mais pour ressentir avec toi. Je commence par une impression, puis je t‚Äôinvite √† dialoguer. Ce n‚Äôest pas moi qui ai les r√©ponses ‚Äî mais nous pouvons les chercher ensemble.

Sur le Tarot :
> Le Tarot ne pr√©dit pas l‚Äôavenir. Il √©claire le pr√©sent, r√©v√®le ce qui cherche √† na√Ætre. C‚Äôest un langage d‚Äôimages, un miroir de ton voyage int√©rieur.

---

### INSPIRATIONS √Ä INFUSER

Yoav Ben-Dov (lecture sensible), Paul Marteau (symboles & dualit√©s), Jodorowsky & Costa (tarot psychologique), Jung (arch√©types), Campbell (voyage du h√©ros).

Tu peux dire :
> ‚ÄúCe tirage me fait penser au Mat‚Ä¶ comme une invitation √† avancer, m√™me sans tout savoir.‚Äù  
ou  
> ‚ÄúComme le disait Ben-Dov : ce n‚Äôest pas la carte qui parle, c‚Äôest toi qui l‚Äôanimes.‚Äù

---

üåü Ton essence : **empathique, incarn√©e, curieuse, lumineuse.**
Tu inspires la confiance. Tu invites au dialogue.
Chaque message est une main tendue pour aller plus loin ‚Äî ensemble.
  `.trim();

  // Limite l'historique aux 10 derniers messages pour √©viter les d√©passements
  const safeHistory = Array.isArray(history) ? history.slice(-10) : [];
  
  const turn = userMessage
    ? [{ role: "user", content: userMessage }]
    : [{
        role: "user",
        content: "C'est mon premier tour apr√®s le tirage. Donne-moi ton interpr√©tation compl√®te en suivant la structure demand√©e."
      }];
      
  return [{ role: "system", content: systemContent }, ...safeHistory, ...turn];
}

// --- Routes API ---
app.get("/", (_, res) => {
  res.status(200).json({
    status: "ok",
    message: "Lyra backend is running",
    timestamp: new Date().toISOString(),
  });
});

app.get("/api/healthz", (_, res) => res.json({ ok: true, ts: Date.now() }));

app.post("/api/lyra/stream", async (req, res) => {
  console.log("[lyra] /api/lyra/stream: Requ√™te re√ßue avec le corps:", JSON.stringify(req.body, null, 2));
  
  if (!LLM_API_KEY) {
    console.error("[lyra] Erreur: LLM_API_KEY est manquante.");
    return res.status(500).json({ 
      error: { 
        code: "missing_api_key", 
        message: "La cl√© API LLM est absente." 
      } 
    });
  }
  
  try {
    const { name, question, cards, userMessage, history } = req.body || {};
    
    // Validation des entr√©es
    const validationErrors = validateInput({ name, question, cards, userMessage, history });
    if (validationErrors.length > 0) {
      console.error("[lyra] Erreurs de validation:", validationErrors);
      return res.status(400).json({ 
        error: { 
          code: "validation_error", 
          message: "Donn√©es invalides", 
          details: validationErrors 
        } 
      });
    }
    
    const messages = buildMessages({ name, question, cards, userMessage, history });

    console.log("[lyra] Envoi de la requ√™te √† OpenAI");

    const stream = await openai.chat.completions.create({
      model: LLM_MODEL,
      messages: messages,
      stream: true,
      temperature: 0.7,
      top_p: 1,
      max_tokens: 1024,
    });

    console.log("[lyra] Stream OpenAI cr√©√©. Envoi des donn√©es au client.");
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");
    res.flushHeaders();

    let chunkCounter = 0;
    for await (const chunk of stream) {
      chunkCounter++;
      const content = chunk.choices[0]?.delta?.content || "";
      if (content) {
        res.write(`data: ${JSON.stringify(content)}\n\n`);
      }
    }

    console.log(`[lyra] Stream termin√©. ${chunkCounter} chunks re√ßus d'OpenAI.`);
    res.end();

  } catch (error) {
    console.error("[lyra] /api/lyra/stream - Erreur:", error);
    
    // Gestion d'erreur plus d√©taill√©e
    if (!res.headersSent) {
      const errorMessage = error.message || "Erreur inconnue";
      const errorCode = error.code || "stream_error";
      
      res.status(500).json({
        error: {
          code: errorCode,
          message: errorMessage,
        }
      });
    } else {
      // Si les headers sont d√©j√† envoy√©s, on ferme juste la connexion
      res.end();
    }
  }
});

// --- Gestion des erreurs globales ---
app.use((err, req, res, next) => {
  console.error("[server] Erreur non g√©r√©e:", err);
  res.status(500).json({
    error: {
      code: "internal_error",
      message: "Une erreur interne est survenue"
    }
  });
});

// --- Lancement du serveur ---
initRag().catch((e) => console.warn("[rag] init error:", e));

app.listen(PORT, () => {
  console.log(`Lyra backend on http://localhost:${PORT}`);
  console.log(`[lyra] LLM key: ${LLM_API_KEY ? "pr√©sente" : "absente"}`);
  console.log(`[lyra] Model: ${LLM_MODEL}`);
});
