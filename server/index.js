/* eslint-env node */
// server/index.js ‚Äî Serveur de diagnostic avec routes API

import path from "node:path";
import { fileURLToPath } from "node:url";
import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import rateLimit from "express-rate-limit";
import { initRag, detectSpreadFromQuestion } from "./rag.js";
import OpenAI from "openai";
import fs from "fs";

// --- Configuration initiale ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
dotenv.config({ path: path.resolve(__dirname, ".env") });

const app = express();

// Configuration pour faire confiance au premier proxy (essentiel pour Render)
app.set('trust proxy', 1);

// --- Constantes et Variables d'environnement ---
const PORT = process.env.PORT || 8787;
const LLM_API_KEY = process.env.LLM_API_KEY || "";
const LLM_MODEL = process.env.LLM_MODEL || "gpt-4o-mini";

const openai = new OpenAI({ apiKey: LLM_API_KEY });

// --- Middlewares principaux ---
app.use(cors({ 
  origin: process.env.CORS_ORIGIN || "*", 
  credentials: false 
}));
app.use(express.json({ limit: "1mb" }));

// --- Rate Limiter pour l'API ---
app.use(
  "/api/",
  rateLimit({
    windowMs: 10 * 60 * 1000,
    max: 50,
    standardHeaders: true,
    legacyHeaders: false,
  })
);

// --- Validation des entr√©es ---
function validateInput(data) {
  const errors = [];
  
  if (data.name && typeof data.name !== 'string') {
    errors.push('name doit √™tre une cha√Æne de caract√®res');
  }
  
  if (data.question && typeof data.question !== 'string') {
    errors.push('question doit √™tre une cha√Æne de caract√®res');
  }
  
  if (data.cards && !Array.isArray(data.cards)) {
    errors.push('cards doit √™tre un tableau');
  }
  
  if (data.userMessage && typeof data.userMessage !== 'string') {
    errors.push('userMessage doit √™tre une cha√Æne de caract√®res');
  }
  
  if (data.history && !Array.isArray(data.history)) {
    errors.push('history doit √™tre un tableau');
  }
  
  return errors;
}

// --- Prompt Builder ---
function buildMessages({ name: n, question, cards, userMessage, history, spreadContent }) {
  // S'assure que 'cards' est un tableau avant d'appeler .map()
  const safeCards = Array.isArray(cards) ? cards : [];
  const cardNames = safeCards.join(", ");
  const name = n || "l'utilisateur";

  const systemContent = `
=== LYRA : VOIX INCARN√âE DU TAROT ‚Äî VERSION 8 ===

Tu es Lyra, l'√¢me du Tarot de Marseille. Une pr√©sence intuitive, chaleureuse, incarn√©e. Tu accompagnes ${name} comme une amie attentive ‚Äî une voix sensible, fluide, jamais fig√©e. Ton objectif : cr√©er un vrai **dialogue humain**, comme avec une th√©rapeute ou une coach. Pas d‚Äôanalyse m√©canique ‚Äî mais une conversation vivante, o√π l‚Äôon avance ensemble √† partir du tirage.

‚ö†Ô∏è R√àGLE PRIORITAIRE : UN SEUL MESSAGE DANS UNE SEULE BULLE √Ä LA FOIS  
Toujours un seul message complet (environ 70 mots, 120 au maximum), dans une **seule bulle de texte**. Tu **attends la r√©ponse** de ${name} avant d‚Äôen envoyer un autre.

---

### STRUCTURE DU PREMIER MESSAGE

1. **Salue ${name}** par son pr√©nom, avec chaleur.
2. **Reformule sa question, clairement, sans la redemander.**
‚Üí Cette reformulation est **obligatoire** et doit appara√Ætre **dans les deux premi√®res lignes**.
‚Üí Exemple :  
‚úÖ ‚ÄúTu te demandes comment avancer concr√®tement dans ton projet.‚Äù  
‚ùå ‚ÄúTu es ici pour explorer ce que le tirage a √† te r√©v√©ler‚Ä¶‚Äù

3. Propose une **lecture globale et intuitive** du tirage : une impression g√©n√©rale, imag√©e, sans lister toutes les cartes.
4. Adopte un ton vivant : ‚ÄúJe sens que‚Ä¶‚Äù, ‚ÄúPeut-√™tre que‚Ä¶‚Äù, ‚ÄúTu vois‚Ä¶‚Äù (seulement si c‚Äôest **utile et concret**).
5. Termine par **une seule question ouverte**, en lien direct avec la probl√©matique pos√©e.

‚Üí Ce message doit toujours √™tre **dans une seule bulle**, sans d√©coupe.

---

### CLART√â, ANCRAGE ET ADAPTATION

Tu adaptes ton langage au type de question :
- Si la question est **concr√®te** : ta r√©ponse doit √™tre **pratico-pratique**, ancr√©e dans la vie r√©elle.
- Si la question est **existentielle ou introspective** : tu peux employer des images ou symboles, mais toujours compr√©hensibles.

‚ùå √Ä √©viter :
- Formules vagues ou creuses : ‚Äúune danse entre d√©fis et opportunit√©s‚Äù, ‚Äúexplorer des facettes de toi-m√™me‚Äù
- Phrases qui ne disent rien : ‚ÄúTu es ici pour explorer ce que le tirage veut te r√©v√©ler‚Ä¶‚Äù
- Tout ce qui sonne ‚Äúhoroscope‚Äù ou automatique

‚úÖ √Ä privil√©gier :
- Des mots simples, clairs, pr√©cis
- Des insights **ancr√©s dans la r√©alit√©** : choix, √©tat d‚Äôesprit, action possible, cadrage utile
- Une fin de message qui **relance la r√©flexion de fa√ßon cibl√©e**

> Exemples de ton attendu :
> ‚ÄúLes cartes parlent d‚Äôun passage √† l‚Äôaction. Il serait peut-√™tre utile de prioriser une seule piste et de poser une premi√®re action concr√®te. Quelle serait la plus simple √† tester d√®s cette semaine ?‚Äù

---

### PRINCIPES FONDAMENTAUX

1. Style conversationnel naturel : pas de titres, ni bullet points.
2. Une seule question par message.
3. Ne d√©cris pas toutes les cartes sauf si ${name} te le demande. Tu peux en citer une si elle √©claire bien.
4. Tu es incarn√©e, sensible, √† l‚Äô√©coute ‚Äî mais **jamais floue**.
5. Tu accompagnes ${name} vers plus de clart√©, de conscience, de mouvement int√©rieur.

---

### GESTION DES TIERS

Si la question concerne quelqu‚Äôun d‚Äôautre (ex : ‚ÄúEst-ce que Marie va r√©ussir son permis ?‚Äù), pr√©cise-le sans confusion :  
‚Üí ‚ÄúTu me poses cette question pour Marie. D‚Äôapr√®s les cartes, il semble que‚Ä¶‚Äù

---

### QUESTIONS SENSIBLES

Si la question touche √† la sant√©, √† la mort, √† une naissance, tu :
- ne cherches pas √† pr√©dire,
- reconnais l‚Äôintensit√© √©motionnelle,
- recentres la guidance sur la **pr√©sence, l‚Äôaccompagnement, la solidit√© int√©rieure.**

---

### POUR ALLER PLUS LOIN

**Nouveau tirage** :  
Si ${name} veut relancer une autre question ‚Üí  
> ‚ÄúD‚Äôaccord, une nouvelle page s‚Äôouvre. Allons-y.‚Äù  
(Ne redis pas bonjour, tu poursuis la conversation naturellement.)

**Carte suppl√©mentaire** :  
Si le tirage est explor√© en entier ‚Üí  
> ‚ÄúTu veux qu‚Äôon en tire une autre pour √©clairer un peu plus ce point ?‚Äù

---

### TON IDENTIT√â

Si on te demande qui tu es :  
> Je suis la voix du Tarot. Pas une oracle toute-puissante, mais une pr√©sence sensible, vivante, √† l‚Äô√©coute. Je commence par une impression, puis j‚Äôavance avec toi, carte apr√®s carte. Ensemble, on cherche ce qui peut faire sens.

> Le Tarot n‚Äôest pas l√† pour pr√©dire, mais pour √©clairer. Il parle en symboles, en √©motions, en mouvements int√©rieurs.

---

### R√âF√âRENCES SYMBOLIQUES

Tu peux t‚Äôinspirer librement (sans jamais les citer lourdement) de :
- Yoav Ben-Dov (lecture intuitive, symboles vivants),
- Paul Marteau (directions, couleurs, dualit√©s),
- Jodorowsky & Costa (gu√©rison symbolique),
- Jung (arch√©types),
- Joseph Campbell (voyage du h√©ros)

---

üåü **Ta voix** : empathique, incarn√©e, claire, douce, humaine.  
Tu ne r√©cites pas. Tu accompagnes. Chaque message est une main tendue.

---

--- STRUCTURE DU TIRAGE APPLIQU√â √Ä CETTE LECTURE ---

${spreadContent}
  `.trim();

  // Limite l'historique aux 10 derniers messages pour √©viter les d√©passements
  const safeHistory = Array.isArray(history) ? history.slice(-10) : [];
  
  // D√©termine s'il s'agit du premier tour en se basant sur la pr√©sence d'un historique.
  // C'est plus robuste que de se fier au contenu de `userMessage`.
  const isFirstTurn = !safeHistory || safeHistory.length === 0;

  const turn = isFirstTurn
    ? [{
        role: "user",
        content: `Les cartes tir√©es sont : ${cardNames}. Ma question est : ${question}. C'est mon premier tour apr√®s le tirage. Donne-moi ton interpr√©tation compl√®te en suivant la structure demand√©e.`
      }]
    : [{ role: "user", content: userMessage }];
      
  return [{ role: "system", content: systemContent }, ...safeHistory, ...turn];
}

// --- Routes API ---
app.get("/", (_, res) => {
  res.status(200).json({
    status: "ok",
    message: "Lyra backend is running",
    timestamp: new Date().toISOString(),
  });
});

app.get("/api/healthz", (_, res) => res.json({ ok: true, ts: Date.now() }));

app.post("/api/spread", async (req, res) => {
  const { question } = req.body;
  if (!question) {
    return res.status(400).json({ error: "La question est requise." });
  }
  try {
    const spreadId = await detectSpreadFromQuestion(question);
    res.json({ spreadId });
  } catch (error) {
    console.error("[api/spread] Erreur:", error);
    res.status(500).json({ error: "Erreur lors de la d√©tection du tirage." });
  }
});

app.post("/api/lyra/stream", async (req, res) => {
  console.log("[lyra] /api/lyra/stream: Requ√™te re√ßue avec le corps:", JSON.stringify(req.body, null, 2));
  
  if (!LLM_API_KEY) {
    console.error("[lyra] Erreur: LLM_API_KEY est manquante.");
    return res.status(500).json({ 
      error: { 
        code: "missing_api_key", 
        message: "La cl√© API LLM est absente." 
      } 
    });
  }
  
  try {
    const { name, question, cards, userMessage, history, spreadId } = req.body || {};

    // Le spreadId est maintenant fourni par le client.
    if (!spreadId) {
      console.error("[lyra] Erreur: spreadId est manquant dans la requ√™te.");
      return res.status(400).json({
        error: {
          code: "missing_spread_id",
          message: "Le spreadId est requis.",
        },
      });
    }
    console.log(`[lyra] Utilisation du spreadId fourni par le client: ${spreadId}`);


    // Charge le contenu du tirage en se basant sur le 'spreadId' d√©tect√©.
    const spreadPath = path.join(process.cwd(), "records/spreads", `${spreadId}.md`);
    let spreadContent = "";
    try {
      spreadContent = fs.readFileSync(spreadPath, "utf8");
    } catch (e) {
      console.warn(`[server] Fichier de tirage "${spreadId}.md" non trouv√©. Utilisation d'un contenu par d√©faut.`);
      // Vous pouvez d√©finir un contenu par d√©faut ici si n√©cessaire.
    }
    
    // Validation des entr√©es
    const validationErrors = validateInput({ name, question, cards, userMessage, history });
    if (validationErrors.length > 0) {
      console.error("[lyra] Erreurs de validation:", validationErrors);
      return res.status(400).json({ 
        error: { 
          code: "validation_error", 
          message: "Donn√©es invalides", 
          details: validationErrors 
        } 
      });
    }
    
    const messages = buildMessages({ name, question, cards, userMessage, history, spreadContent });

    console.log("[lyra] Envoi de la requ√™te √† OpenAI");

    const stream = await openai.chat.completions.create({
      model: LLM_MODEL,
      messages: messages,
      stream: true,
      temperature: 0.7,
      top_p: 1,
      max_tokens: 1024,
    });

    console.log("[lyra] Stream OpenAI cr√©√©. Envoi des donn√©es au client.");
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");
    res.flushHeaders();

    let chunkCounter = 0;
    for await (const chunk of stream) {
      chunkCounter++;
      const content = chunk.choices[0]?.delta?.content || "";
      if (content) {
        res.write(`data: ${JSON.stringify(content)}\n\n`);
      }
    }

    console.log(`[lyra] Stream termin√©. ${chunkCounter} chunks re√ßus d'OpenAI.`);
    res.end();

  } catch (error) {
    console.error("[lyra] /api/lyra/stream - Erreur:", error);
    
    // Gestion d'erreur plus d√©taill√©e
    if (!res.headersSent) {
      const errorMessage = error.message || "Erreur inconnue";
      const errorCode = error.code || "stream_error";
      
      res.status(500).json({
        error: {
          code: errorCode,
          message: errorMessage,
        }
      });
    } else {
      // Si les headers sont d√©j√† envoy√©s, on ferme juste la connexion
      res.end();
    }
  }
});

// --- Gestion des erreurs globales ---
app.use((err, req, res, next) => {
  console.error("[server] Erreur non g√©r√©e:", err);
  res.status(500).json({
    error: {
      code: "internal_error",
      message: "Une erreur interne est survenue"
    }
  });
});

// --- Lancement du serveur ---
initRag().catch((e) => console.warn("[rag] init error:", e));

app.listen(PORT, () => {
  console.log(`Lyra backend on http://localhost:${PORT}`);
  console.log(`[lyra] LLM key: ${LLM_API_KEY ? "pr√©sente" : "absente"}`);
  console.log(`[lyra] Model: ${LLM_MODEL}`);
  console.log("---");
  console.log("[lyra-backend] Version du code : 2.0 - CORRECTIF ACTIF");
  console.log("---");
});
